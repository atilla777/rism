# frozen_string_literal: true

class VulnerabilityBulletinReport < BaseReport
  include DateTimeHelper

  set_lang :ru
  set_report_name :vulnerability_bulletin_report
  set_human_name 'Бюллетень уязвимостей'
  set_report_model 'VulnerabilityBulletin'
  set_required_params %i[vulnerability_bulletin_id]
  set_formats %i[docx]

  def docx(blank_document)
    r = blank_document
    r.page_size do
      #width       16837 # sets the page width. units in twips.
      #height      11905 # sets the page height. units in twips.
      #orientation :landscape  # sets the printer orientation. accepts :portrait and :landscape.
      orientation :portrait # sets the printer orientation. accepts :portrait and :landscape.
    end

    r.style id: 'ParagraphHeader', name: 'ParagraphHeader' do
      font 'Times New Roman'
      align :center
      top 0
      bottom 0
      line 230
    end

    r.style id: 'ParagraphContent', name: 'ParagraphContent' do
      font 'Times New Roman'
      align :left
      top 0
      bottom 100
      line 230
    end

    r.style id: 'ParagraphBreak', name: 'ParagraphBreak' do
      font 'Times New Roman'
      size 12
      top 0
      bottom 0
    end

    r.style id: 'TextMainHeader', name: 'TextMainHeader' do
      font 'Times New Roman'
      type 'character'
      size 28
      bold true
      color '154360'
    end

    r.style id: 'TextHeader', name: 'TextHeader' do
      font 'Times New Roman'
      type 'character'
      size 24
      bold true
      color '154360'
    end

    r.style id: 'TextHeaderWarning', name: 'TextHeaderWarning' do
      font 'Times New Roman'
      type 'character'
      size 24
      bold true
      color '581845'
    end

    r.style id: 'TextHeaderInfo', name: 'TextHeaderInfo' do
      font 'Times New Roman'
      type 'character'
      size 24
      bold true
      color '08786C'
    end

    r.style id: 'TextHeaderDanger', name: 'TextHeaderDanger' do
      font 'Times New Roman'
      type 'character'
      size 24
      bold true
      color 'B03A2E'
    end

    r.style id: 'TextContent', name: 'TextContent' do
      font 'Times New Roman'
      type 'character'
      size 24
    end

    r.style id: 'TextContentDanger', name: 'TextContentDanger' do
      font 'Times New Roman'
      type 'character'
      size 24
      color 'B03A2E'
    end

    record = @record

    r.p do
      style  'ParagraphHeader'
      text "Бюллетень уязвимостей", style: 'TextMainHeader'
    end

    r.p do
        style  'ParagraphHeader'
        text record.name, style: 'TextContent', color: 'B03A2E'
    end

    r.p  do
      style  'ParagraphHeader'
      text "№ #{record.codename}", style: 'TextHeader'
    end

    r.p do
      style  'ParagraphHeader'
      text(
        "(по состоянию на #{Date.current.strftime('%d.%m.%Y')})",
        style: 'TextContent',
        size: 20
      )
    end

    r.p style: 'ParagraphBreak'

    r.p do
      style  'ParagraphContent'
      text "Дата создания: ", style: 'TextHeader'
      text record.created_at.strftime('%d.%m.%Y'), style: 'TextContent'
    end
    r.p do
      style  'ParagraphContent'
      text "Тип бюллетеня: ", style: 'TextHeader'
      text record.vulnerability_bulletin_kind.name, style: 'TextContent'
    end

    if record.vulnerability_bulletin_status_id.present?
      r.p do
        style  'ParagraphContent'
        text "Статус бюллетеня: ", style: 'TextHeader'
        text(
          record.vulnerability_bulletin_status.name,
          style: 'TextContent'
        )
      end
    end

    r.p do
      style  'ParagraphContent'
      text "Владелец бюллетеня: ", style: 'TextHeader'
      text record.organization.name, style: 'TextContent'
    end

    r.p style: 'ParagraphBreak'

    description = record.description.split("\n")&.map { |i| i.remove("\r") }
    description.each do |d|
      r.p do
        style  'ParagraphContent'
        text d, style: 'TextContent'
      end
    end

    r.p style: 'ParagraphBreak'

    r.p do
      style 'ParagraphContent'
      text "Уязвимости:", style: 'TextHeader'
    end

    r.p style: 'ParagraphBreak'

    r.hr do
      color '154360'
      size    20
      #spacing 4
    end

    @records.each do |vulnerability|
      print_vulnerability(r, vulnerability)
      r.hr do
        color '154360'
        spacing 4
      end
    end
  end

  def print_vulnerability(r, vulnerability, space = '')
    v = VulnerabilityDecorator.new(vulnerability)
    r.p do
      style  'ParagraphContent'
      text v.codename, style: 'TextHeaderDanger'
    end
    r.p do
      style  'ParagraphContent'
      text '    '
      text "CVSS: ", style: 'TextHeader'
      if v.show_cvss.blank?
        text 'Пока не оценено', style: 'TextContent'
      else
        text v.show_cvss, style: 'TextContent'
        text ' '
        text v.show_cvss_vector, style: 'TextContent'
      end
    end
    if v.custom_description.present?
      description = v.custom_description.split("\n")&.map { |i| i.remove("\r") }
      description.each do |d|
        r.p do
          style 'ParagraphContent'
          text '    '
          text d, style: 'TextContent', italic: true
        end
      end
    end
    references = v.show_references_string(separator: "\n")
    if v.custom_references.present? || references.present?
      r.p do
        style  'ParagraphContent'
        text '    '
        text "Ссылки: ", style: 'TextHeader'
      end
    end
    references.split("\n").each do |ref|
      r.p do
        text '        '
        text ref, style: 'TextContent'
      end
    end
    v.custom_references&.split("\n")&.map { |i| i.remove("\r") }&.each do |ref|
      r.p do
        text '        '
        text ref, style: 'TextContent'
      end
    end

    if v.show_versions_by_products_hash.present?
      r.p do
        style 'ParagraphContent'
        text '    '
        text "#{I18n.t('labels.products_info')}: ", style: 'TextHeader'
        text '    '
      end
    end

    v.show_versions_by_products_hash.each do |vendor, product_hash|
      r.p do
        text '        '
        text vendor, style: 'TextHeaderWarning'
      end
      product_hash.each do |product, versions|
        r.p do
          text '            '
          text "#{product} ", style: 'TextHeaderInfo'
          text versions.select{ |version| version != '*'}.uniq.join(', '), style: 'TextContent'
        end
      end
    end
  end

  private

  def get_records(options, _organization)
    @record = VulnerabilityBulletin.find(options[:vulnerability_bulletin_id])
    @record.vulnerabilities
  end
end
